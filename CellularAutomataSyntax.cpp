/*
	текст программы может состоять из
		директив препроцессора,
		объявлений или определений данных, в том числе клеточных массивов
		описаний функций, описаний клеточных автоматов
		также допускаются описания пользовательских типов, таких как классы и структуры
		В качестве данных могут выступать:
			переменные, константы, статические и динамические массивы, специализированные КА типы

			новое: структуры данных, которые специализированно созданы для величин внешних воздействий
*/

#define classArray class
#define CellAuto class
#define lattice_type //тип решетки         -    константы
#define space_chape  //форма пространства  -     константы
#define neig         //шаблон соседства
//директивы препроцессора
#include "file_name" //etc...
struct SimpleData 
{
	int number;
	char[] symbols;
};
//описание класса клеточного массива
classArray SimpleLattice <lattice_type, space_chape> 
{
	//поля данных
	int posix;
	bool flag;
	SimpleData data;

	//шаблоны соседства, можно определять несколько
	neig T = { #{0}, #{1}, #{2}, #{1, 0}, #{1, 1, 2} };

	//типовые методы:
		
};

//описание клеточного автомата
CellAuto automataName 
{
	//переменные, константы, клеточные массивы данных (для значений внешних воздействий)
	int t, l;
    float bar;
	SimpleLatticeOther innerCell;

	//список параметров передается через конструктор (клеточный массив)
	AutomataName(SimpleLattice A)
   {
	  sys1: A;//указываем требуемую подстановку и клеточный массив, с каким хотим работать
	  sys2: A;
   }

	AutomataName(OtherLattice B) 
	{
	    sys1: B;
	}
	
	//система параллельных подстановок
   System sys1 : C //формальный параметр - клеточный массив, с которым работает клеточный автомат
  {

  }

  System sys2 :  F
  {

  }

};